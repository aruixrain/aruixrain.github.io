import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as n}from"./app-7V2lPg4G.js";const t="/assets/img_3-CqNDcCxp.png",p="/assets/img_4-Di9xE7Z2.png",l="/assets/image-ByYQYNYW.png",g="/assets/img_5-D7tGaHIA.png",r="/assets/img_6-BcYpbuy8.png",d="/assets/img_8-CTJrMsIb.png",o="/assets/img_9-BREL2mnx.png",h="/assets/img_10-CIiroYtw.png",c="/assets/img_11-BQ3bN9Sz.png",k="/assets/img_12-B-YI86yI.png",m="/assets/img_13-B9LvUlb6.png",u="/assets/img_14-b21H4ZXK.png",f="/assets/img_15-CqfmCSAG.png",_="/assets/img_17-DBL4-JrW.png",b="/assets/img_18-BTcwDGqP.png",y="/assets/img_16-Cs2XPZrN.png",A="/assets/img_19-CD2XJn3K.png",F="/assets/img_20-CCYC01I4.png",x="/assets/img_21-p6KunjIq.png",B="/assets/img_22-objEBkq7.png",v="/assets/img_23-rXyu8hky.png",E="/assets/img_24-jCCXVkvW.png",q="/assets/img_25-DKC6KgWf.png",C="/assets/img_26-lTjidDOZ.png",z="/assets/img_27-D5EZRJ2M.png",R="/assets/img_28-dM-mZquC.png",S="/assets/img_29-DXlFH5ph.png",D="/assets/img_30-D4SYoGqm.png",L="/assets/img_31-DDpVQb6W.png",X="/assets/img_32-CjMh3VwW.png",M="/assets/img_33-CkVXivCi.png",I="/assets/img_34-DQB3VYZQ.png",T="/assets/img_35-BOsBH_5y.png",P="/assets/img_36-C_QbCczX.png",w="/assets/img_37-LBbxUx6g.png",N="/assets/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-B6ibAC4h.png",J="/assets/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8F-CPHqmUc3.png",V="/assets/%E6%8E%A8%E6%A8%A1%E5%BC%8F-D_s7YNoQ.png",H="/assets/%E6%8B%89%E6%A8%A1%E5%BC%8F-CEc5vJe6.png",Q="/assets/%E6%8E%A8%E6%8B%89%E7%BB%93%E5%90%88%E6%A8%A1%E5%BC%8F-449w-ktJ.png",Y="/assets/feed%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98-BbVCkl2P.png",K="/assets/%E6%BB%9A%E5%8A%A8%E5%88%86%E9%A1%B5-C_uVmy4b.png",Z={};function W(j,i){return n(),e("div",null,i[0]||(i[0]=[a('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><h3 id="通用命令" tabindex="-1"><a class="header-anchor" href="#通用命令"><span>通用命令</span></a></h3><p>不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期</p><h3 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型"><span>String类型</span></a></h3><p>最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key</p><p>Mset 批量 添加key-value</p><p>Mget批量获取</p><p>数值类型：incr ：让变量自增加一</p><p>incrby num：按照步长增加</p><p>setnx:不存在 key才可以添加这个key</p><h3 id="如何区分不同的key" tabindex="-1"><a class="header-anchor" href="#如何区分不同的key"><span>如何区分不同的key？</span></a></h3><p>利用层级结构来表明table，以后的大部分业务都是用层级结构来展现和布局的！</p><h3 id="hash类型" tabindex="-1"><a class="header-anchor" href="#hash类型"><span>Hash类型</span></a></h3><p>哈希类型，也叫做散列，Hash的value是一个无须字典，类似于HashMap的结构。</p><p>具有field这一个字段，这是不一样的。</p><h3 id="list类型" tabindex="-1"><a class="header-anchor" href="#list类型"><span>List类型</span></a></h3><p>类似于 LinkedList(也就是双向链表)</p><ul><li>有序</li><li>元素可重复</li><li>插入删除快</li><li>查询速度一般</li></ul><p>Lpush key element：向左侧插入元素 返回列表长度，相应的向右边：Rpush key element</p><p>Lpop key:移除左侧第一个元素，没有则返回nil</p><p>Blop/Brpop key times:阻塞队列的插入 ,加上阻塞时间</p><p>如何用List来模拟栈？</p><p>入口和出口一起。Lpush和Lpop</p><p>模拟队列？</p><p>入口和出口不在一起。Lpush和Rpop</p><p>模拟阻塞队列？</p><p>入口出口不在一边，取的时候用阻塞Brpop/Blpop</p><h3 id="set类型" tabindex="-1"><a class="header-anchor" href="#set类型"><span>Set类型</span></a></h3><p>类似于HashSet，可以看作是value为null的hashMap。</p><p>Sadd key member:添加一个或多个元素。</p><p>Srem key member:删除元素</p><p>Smembers：获取所有元素</p><p>Sinter key1 key2:求取交集</p><p>Sdiff：求差集</p><p>Sunion:求并集</p><p>Scard:求元素个数</p><p>Sismenber key member:是否是成员</p><h3 id="sortedset" tabindex="-1"><a class="header-anchor" href="#sortedset"><span>SortedSet</span></a></h3><figure><img src="'+t+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><p>zrank key member:排名从0开始计算</p><p>zcount key min max:统计区间数量</p><figure><img src="'+p+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span><hr></span></a></h2><h2 id="redis实际开发时序列化的问题" tabindex="-1"><a class="header-anchor" href="#redis实际开发时序列化的问题"><span>Redis实际开发时序列化的问题</span></a></h2><figure><img src="'+l+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h2 id="session共享问题-基于redis实现的session数据数据共享" tabindex="-1"><a class="header-anchor" href="#session共享问题-基于redis实现的session数据数据共享"><span>Session共享问题，基于Redis实现的Session数据数据共享</span></a></h2><p>多台Tomcat服务器，每一台都有不同的Session空间，将会存在共享问题,互相拷贝具有时间延迟和空间浪费的问题。</p><figure><img src="'+g+'" alt="img_5.png " tabindex="0" loading="lazy"><figcaption>img_5.png </figcaption></figure><blockquote><p>解决方案：Redis数据共享</p></blockquote><blockquote><p>code作为key显然是不行的，将会覆盖，所有选用Phone作为key，使用Hash结构来存储， 内存占用也会比较少相对于String类型，使用随机token作为key来存储用户信息。 现在token作为登录凭证，返回token给客户端</p></blockquote><figure><img src="'+r+'" alt="img_6.png" tabindex="0" loading="lazy"><figcaption>img_6.png</figcaption></figure><blockquote><p>缓存：浏览器缓存-&gt;应用层缓存（Redis，Nginx,Tomcat...各种缓存）-&gt;数据库缓存，根据索引来进行缓存，减少磁盘IO</p></blockquote><p>优点：降低后端负载，提高读写速率，降低响应时间 成本：数据一致性成本，当数据库发生改变时，缓存未跟新，就会出现不一致， 代码维护成本也会提高，为了高可用，运维成本也会提高</p><figure><img src="'+d+'" alt="img_8.png" tabindex="0" loading="lazy"><figcaption>img_8.png</figcaption></figure><h2 id="缓存更新策略" tabindex="-1"><a class="header-anchor" href="#缓存更新策略"><span>缓存更新策略：</span></a></h2><p>内存淘汰，超时剔除(低一致性)，主动更新（高一致性）</p><figure><img src="'+o+'" alt="img_9.png" tabindex="0" loading="lazy"><figcaption>img_9.png</figcaption></figure><blockquote><p>主动更新：</p><p>1调用者更新数据库时同时更新缓存；（可控性最高）</p><p>2 缓存和数据库整合为一个服务；</p><p>3 调用只操作，独立异步线程持久化到数据库,从而实现缓存和数据库一致</p></blockquote><blockquote><p>删除缓存（无效操作太多）而不是更新缓存，单体项目需要将缓存和数据库放在一个事务，考虑线程安全 Cache Aside Pattern（解决线程安全问题） <img src="'+h+'" alt="img_10.png" loading="lazy"></p></blockquote><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透：</span></a></h3><p><em>请求客户端数据中，缓存里面和数据库里面数据都不存在，请求都打到数据库上面了</em></p><blockquote><p>解决办法：布隆过滤器（内存占用少），缓存空对象或者null（额外内存消耗，可能造成短期不一致） <img src="'+c+'" alt="img_11.png" loading="lazy"> 主动添加 对ID的复杂度</p></blockquote><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><blockquote><p><img src="'+k+'" alt="img_12.png" loading="lazy"> 很多key同时失效</p></blockquote><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><blockquote><p>热点key突然失效，无效热点数据给数据库带来巨大压力</p><p>1：使用互斥锁来写入缓存，但是互相等待时间比较长，性能较差</p><p>2：逻辑过期TTL=-1</p><figure><img src="'+m+'" alt="img_13.png" tabindex="0" loading="lazy"><figcaption>img_13.png</figcaption></figure><figure><img src="'+u+'" alt="img_14.png" tabindex="0" loading="lazy"><figcaption>img_14.png</figcaption></figure></blockquote><p>选择一致性还是可用性</p><blockquote><p>全局唯一 ID生成器 <img src="'+f+'" alt="img_15.png" loading="lazy"></p></blockquote><p>UUID：没有满足特性 ，RedisId：数字类型，snowflake：算法，维护机器ID</p><h3 id="多线程下高并发超卖问题是怎么发生的" tabindex="-1"><a class="header-anchor" href="#多线程下高并发超卖问题是怎么发生的"><span>多线程下高并发超卖问题是怎么发生的</span></a></h3><blockquote><figure><img src="'+_+'" alt="img_17.png" tabindex="0" loading="lazy"><figcaption>img_17.png</figcaption></figure><figure><img src="'+b+'" alt="img_18.png" tabindex="0" loading="lazy"><figcaption>img_18.png</figcaption></figure></blockquote><p>当线程扣减时候，多线程查询库存，扣减库存之前，直接一个数据用两次，使得出现并发安全问题。</p><h2 id="锁的介绍" tabindex="-1"><a class="header-anchor" href="#锁的介绍"><span>锁的介绍：</span></a></h2><h3 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁"><span>悲观锁：</span></a></h3><blockquote><p>悲观锁</p><p>例如synchronized 和lock，认为线程安全问题一定会发生，在操作数据之前一定要获得锁之后才执行</p></blockquote><blockquote><p>乐观锁</p><p>认为线程安全问题不一定会发生，多数情况不发生，不加锁， 在线程做数据更新时进行数据判断，看之前的判断数据是否发生修改，性能相较于乐观锁好</p></blockquote><blockquote><p>那怎么判断之前的数据是否发生了修改呢？</p></blockquote><p>1：版本号法（最广泛） 给数据加上版本号，同时在修改时不仅要查询版本号同时还要修改版本号</p><figure><img src="'+y+'" alt="img_16.png" tabindex="0" loading="lazy"><figcaption>img_16.png</figcaption></figure><p>2：CAS方法，假如数据本身具有变化，那么数据本深就可以作为版本号</p><p>3：分段锁，解决成功率较低的问题，实际秒杀还要对秒杀进行优化，不对数据库造成压力</p><blockquote><p>集群模式下的并发安全问题：</p><p>当出现集群和负载均衡时，可能出现交叉执行，锁失效了，这就是分布式来解决这个问题</p><p>锁监视器不是同一个</p><p>出现了两套JVM，锁监视器具有不同的，这将会导致出现并发安全问题</p><p>==》解决办法：分布式锁</p></blockquote><h3 id="一人一单" tabindex="-1"><a class="header-anchor" href="#一人一单"><span>一人一单</span></a></h3><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h2><p>实现原理：不同的JVM采用同一个JVM</p><p>分布式锁特点：多进程可见同时时互斥的锁，高可用性，高并发（高性能），安全性，是否会产生死锁</p><p>是否满足可重入性？（不是重点）</p><blockquote><p>分布式锁的实现</p><p>实现方式：Mysql Redis Zookeeper</p><p>mysql:利用mysql本身的互斥锁机制，redis:利用setnx这样的互斥命令，利用key的过期时间来解决安全问题。</p><p>zookeeper 利用唯一节点和有序性来实现互斥锁。高可用性还是比较好的，安全性较好</p></blockquote><h2 id="基于redis实现分布式锁" tabindex="-1"><a class="header-anchor" href="#基于redis实现分布式锁"><span>基于Redis实现分布式锁：</span></a></h2><figure><img src="'+A+'" alt="img_19.png" tabindex="0" loading="lazy"><figcaption>img_19.png</figcaption></figure><figure><img src="'+F+`" alt="img_20.png" tabindex="0" loading="lazy"><figcaption>img_20.png</figcaption></figure><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  SET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [EX </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> milliseconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXAT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PXAT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> milliseconds-timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">KEEPTTL]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [NX|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XX]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [GET]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  summary:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  since:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.0.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  group:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lock</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> thread</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NX</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lock</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> thread</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NX</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ttl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lock</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现将会是非阻塞式的分布式锁</p><figure><img src="`+x+'" alt="img_21.png" tabindex="0" loading="lazy"><figcaption>img_21.png</figcaption></figure><p>极端情况线程出现并发安全问题。</p><figure><img src="'+B+'" alt="img_22.png" tabindex="0" loading="lazy"><figcaption>img_22.png</figcaption></figure><p>解决办法：释放锁的时候需要进行检查，看自己的锁标识是否和之前获取的一样。</p><figure><img src="'+v+'" alt="img_23.png" tabindex="0" loading="lazy"><figcaption>img_23.png</figcaption></figure><figure><img src="'+E+'" alt="img_24.png" tabindex="0" loading="lazy"><figcaption>img_24.png</figcaption></figure><p>只要redis锁发生了超时释放就有可能发生并发问题。</p><p>例如FullGc时，发生阻塞就会出现并发问题，所以释放锁和判断锁标识必须是原子性的，必须同时</p><h3 id="用lua脚本来解决原子性问题" tabindex="-1"><a class="header-anchor" href="#用lua脚本来解决原子性问题"><span>用Lua脚本来解决原子性问题</span></a></h3><p>利用看门狗解决锁超时释放的问题</p><figure><img src="'+q+'" alt="img_25.png" tabindex="0" loading="lazy"><figcaption>img_25.png</figcaption></figure><figure><img src="'+C+'" alt="img_26.png" tabindex="0" loading="lazy"><figcaption>img_26.png</figcaption></figure><h2 id="redisson问题-呵呵-这是一个把分布式锁实现好的开源框架" tabindex="-1"><a class="header-anchor" href="#redisson问题-呵呵-这是一个把分布式锁实现好的开源框架"><span>Redisson问题(呵呵，这是一个把分布式锁实现好的开源框架)</span></a></h2><figure><img src="'+z+'" alt="img_27.png" tabindex="0" loading="lazy"><figcaption>img_27.png</figcaption></figure><figure><img src="'+R+'" alt="img_28.png" tabindex="0" loading="lazy"><figcaption>img_28.png</figcaption></figure><figure><img src="'+S+'" alt="img_29.png" tabindex="0" loading="lazy"><figcaption>img_29.png</figcaption></figure><h2 id="redisson-分布式锁原理" tabindex="-1"><a class="header-anchor" href="#redisson-分布式锁原理"><span>redisson 分布式锁原理：</span></a></h2><figure><img src="'+D+'" alt="img_30.png" tabindex="0" loading="lazy"><figcaption>img_30.png</figcaption></figure><p>可重入：利用hash结构来记录线程id和重入次数，类似于ReentryLock</p><p>可重试：利用信号量实现等待和获取锁失败的重试机制</p><p>超时续约：利用看门狗，在获取锁之后，每隔一段时间，就自动续约，锁满血复活。</p><h3 id="分布式锁的主从一致性问题。" tabindex="-1"><a class="header-anchor" href="#分布式锁的主从一致性问题。"><span>分布式锁的主从一致性问题。</span></a></h3><p>利用redisson的multi lock来实现</p><figure><img src="'+L+'" alt="img_31.png" tabindex="0" loading="lazy"><figcaption>img_31.png</figcaption></figure><h3 id="利用redis来优化秒杀" tabindex="-1"><a class="header-anchor" href="#利用redis来优化秒杀"><span>利用Redis来优化秒杀</span></a></h3><p>使用Set类型，解决唯一性问题。lua脚本来解决锁释放和事务提交的原子性问题</p><figure><img src="'+X+'" alt="img_32.png" tabindex="0" loading="lazy"><figcaption>img_32.png</figcaption></figure><p>将下单信息添加到阻塞队列里面</p><figure><img src="'+M+'" alt="img_33.png" tabindex="0" loading="lazy"><figcaption>img_33.png</figcaption></figure><h3 id="windows相关命令" tabindex="-1"><a class="header-anchor" href="#windows相关命令"><span>Windows相关命令：</span></a></h3><blockquote><p>查找并记录需要杀死的进程号码： netstat -ano</p><p>查找端口：netstat -ano|findstr [Port]</p><p>查找名称：tasklist |findstr [PID]</p><p>杀死进程： taskkill -f -pid [PID]</p></blockquote><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><hr></span></a></h2><h2 id="消息队列【message-queue】-【rabbitmq-kafka-redisq】" tabindex="-1"><a class="header-anchor" href="#消息队列【message-queue】-【rabbitmq-kafka-redisq】"><span>消息队列【Message Queue】:【RabbitMq Kafka RedisQ】</span></a></h2><p>基于Redis实现的异步阻塞队列存在jvm内存溢出问题，基于此实现了消息队列。</p><blockquote><p>消息队列：存储和管理消息，称为消息代理（message broker）</p><p>生产者:发送消息到消息队列</p><p>消费者：从消息队列中获取消息并处理</p><figure><img src="'+I+'" alt="img_34.png" tabindex="0" loading="lazy"><figcaption>img_34.png</figcaption></figure></blockquote><h4 id="基于redis-list结构来模拟消息队列" tabindex="-1"><a class="header-anchor" href="#基于redis-list结构来模拟消息队列"><span>基于Redis-List结构来模拟消息队列</span></a></h4><p>BLpush+BRpop/BRpush+BLpop</p><p>独立于JVM，不依赖于机器，具备数据持久化，满足消息的有序性。 无法避免消息丢失，只支持单消费者。</p><h4 id="基于pubsub的消息队列" tabindex="-1"><a class="header-anchor" href="#基于pubsub的消息队列"><span>基于PubSub的消息队列</span></a></h4><p>发布-订阅模式</p><p>支持多生产和多消费：publish subscribe，psubscribe匹配使用正则表达式</p><p>不支持消息持久化，无法避免消息丢失（当客户端宕机时，不接受消息，消息将会丢失），消息堆积有上限。</p><h4 id="基于stream的消息队列。基于redis-5-0实现" tabindex="-1"><a class="header-anchor" href="#基于stream的消息队列。基于redis-5-0实现"><span>基于Stream的消息队列。基于Redis-5.0实现</span></a></h4><p>XADD key [队列是否创建] [消息队列最大上限] [ID] [filed] [value] XREAD [count] [block sec] streams [key] [id] xgroup creat key groupName ID 消息可回溯，可阻塞读取，可被多个消费者读取，有漏读的风险 单词：pending:待定</p><figure><img src="'+T+'" alt="img_35.png" tabindex="0" loading="lazy"><figcaption>img_35.png</figcaption></figure><figure><img src="'+P+'" alt="img_36.png" tabindex="0" loading="lazy"><figcaption>img_36.png</figcaption></figure><figure><img src="'+w+'" alt="img_37.png" tabindex="0" loading="lazy"><figcaption>img_37.png</figcaption></figure><h3 id="消费者组" tabindex="-1"><a class="header-anchor" href="#消费者组"><span>消费者组：</span></a></h3><p>消息分流 消息标识（确保消息都会被消费） 消息确认（消息处于pending状态，存入list中，需要得到确认 ）</p><p>xgroup create/destory/delconsumer key groupName ID [&quot;mkstream&quot;]</p><p>基于stream来实现的消费者组， 读取消息都是从pending-list中读取消息，实现方法是通过id进行筛选</p><p>消息读取之后必须进行确认，参数为消息id，确认之后消息id将会被消息队列移除</p><p>消费者组的名称一般企业环境下都是写在yml文件里面</p><figure><img src="'+N+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h3 id="三种消息队列list-pubsub-stream-解决方案的区别" tabindex="-1"><a class="header-anchor" href="#三种消息队列list-pubsub-stream-解决方案的区别"><span>三种消息队列List PubSub Stream 解决方案的区别</span></a></h3><figure><img src="'+J+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><h2 id="发布达人探店" tabindex="-1"><a class="header-anchor" href="#发布达人探店"><span>发布达人探店</span></a></h2><p>对两张表去进行表的设计：</p><p>利用Zsort来作为点赞和排行榜数据结构 相关命令：zadd member score ,zscore member，zrange key from to</p><h2 id="关注推送-feed流-提供沉浸式体验" tabindex="-1"><a class="header-anchor" href="#关注推送-feed流-提供沉浸式体验"><span>关注推送，Feed流，提供沉浸式体验</span></a></h2><blockquote><p>常见的两种实现模式：</p><p>timeline：核心需要带上时间戳，不做内容筛选，信息全面，实现相对简单，但是信息噪音比较多</p><p>实现方式：拉模式，推模式，推拉结合</p><p>拉模式（读扩散）：缺点是延迟高</p><figure><img src="'+V+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><p>推模式</p><figure><img src="'+H+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><p>推拉结合： <img src="'+Q+'" alt="img.png" loading="lazy"></p><p>收件箱使用redis来实现，查询redis查询收件箱数据时需要实现分页查询，list，soretedset，数据的角标会发生变换，按照传统的分页方案将会出现错误</p><figure><img src="'+Y+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><figure><img src="'+K+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><p>智能排序：针对用户使用习惯做一些算法，尽量接近用户使用习惯，但当用户习惯与算法不对称时，将会出现反作用</p></blockquote>',154)]))}const U=s(Z,[["render",W],["__file","Redis.html.vue"]]),$=JSON.parse(`{"path":"/doc/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis.html","title":"Redis","lang":"zh-CN","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"=","7":" ","8":"'","9":"R","10":"e","11":"d","12":"i","13":"s","14":"'","15":" ","16":"d","17":"a","18":"t","19":"e","20":" ","21":"=","22":" ","23":"2","24":"0","25":"2","26":"3","27":"-","28":"1","29":"0","30":"-","31":"0","32":"3","33":"T","34":"2","35":"0","36":":","37":"3","38":"1","39":":","40":"0","41":"4","42":"+","43":"0","44":"8","45":":","46":"0","47":"0","48":" ","49":"d","50":"r","51":"a","52":"f","53":"t","54":" ","55":"=","56":" ","57":"f","58":"a","59":"l","60":"s","61":"e","62":" ","63":"t","64":"a","65":"g","66":"s","67":" ","68":"=","69":" ","70":"[","71":"\\"","72":"缓","73":"存","74":"\\"","75":"]","description":"Redis 通用命令 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期 String类型 最简单的Redis数据类型，valu...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/doc/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis.html"}],["meta",{"property":"og:title","content":"Redis"}],["meta",{"property":"og:description","content":"Redis 通用命令 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期 String类型 最简单的Redis数据类型，valu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Cotton Eye Joe"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cotton Eye Joe\\",\\"url\\":\\"https://github.com/ToDreamr\\"}]}"]]},"headers":[{"level":3,"title":"通用命令","slug":"通用命令","link":"#通用命令","children":[]},{"level":3,"title":"String类型","slug":"string类型","link":"#string类型","children":[]},{"level":3,"title":"如何区分不同的key？","slug":"如何区分不同的key","link":"#如何区分不同的key","children":[]},{"level":3,"title":"Hash类型","slug":"hash类型","link":"#hash类型","children":[]},{"level":3,"title":"List类型","slug":"list类型","link":"#list类型","children":[]},{"level":3,"title":"Set类型","slug":"set类型","link":"#set类型","children":[]},{"level":3,"title":"SortedSet","slug":"sortedset","link":"#sortedset","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"Redis实际开发时序列化的问题","slug":"redis实际开发时序列化的问题","link":"#redis实际开发时序列化的问题","children":[]},{"level":2,"title":"Session共享问题，基于Redis实现的Session数据数据共享","slug":"session共享问题-基于redis实现的session数据数据共享","link":"#session共享问题-基于redis实现的session数据数据共享","children":[]},{"level":2,"title":"缓存更新策略：","slug":"缓存更新策略","link":"#缓存更新策略","children":[{"level":3,"title":"缓存穿透：","slug":"缓存穿透","link":"#缓存穿透","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]},{"level":3,"title":"多线程下高并发超卖问题是怎么发生的","slug":"多线程下高并发超卖问题是怎么发生的","link":"#多线程下高并发超卖问题是怎么发生的","children":[]}]},{"level":2,"title":"锁的介绍：","slug":"锁的介绍","link":"#锁的介绍","children":[{"level":3,"title":"悲观锁：","slug":"悲观锁","link":"#悲观锁","children":[]},{"level":3,"title":"一人一单","slug":"一人一单","link":"#一人一单","children":[]}]},{"level":2,"title":"分布式锁","slug":"分布式锁","link":"#分布式锁","children":[]},{"level":2,"title":"基于Redis实现分布式锁：","slug":"基于redis实现分布式锁","link":"#基于redis实现分布式锁","children":[{"level":3,"title":"用Lua脚本来解决原子性问题","slug":"用lua脚本来解决原子性问题","link":"#用lua脚本来解决原子性问题","children":[]}]},{"level":2,"title":"Redisson问题(呵呵，这是一个把分布式锁实现好的开源框架)","slug":"redisson问题-呵呵-这是一个把分布式锁实现好的开源框架","link":"#redisson问题-呵呵-这是一个把分布式锁实现好的开源框架","children":[]},{"level":2,"title":"redisson 分布式锁原理：","slug":"redisson-分布式锁原理","link":"#redisson-分布式锁原理","children":[{"level":3,"title":"分布式锁的主从一致性问题。","slug":"分布式锁的主从一致性问题。","link":"#分布式锁的主从一致性问题。","children":[]},{"level":3,"title":"利用Redis来优化秒杀","slug":"利用redis来优化秒杀","link":"#利用redis来优化秒杀","children":[]},{"level":3,"title":"Windows相关命令：","slug":"windows相关命令","link":"#windows相关命令","children":[]}]},{"level":2,"title":"","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"消息队列【Message Queue】:【RabbitMq Kafka RedisQ】","slug":"消息队列【message-queue】-【rabbitmq-kafka-redisq】","link":"#消息队列【message-queue】-【rabbitmq-kafka-redisq】","children":[{"level":3,"title":"消费者组：","slug":"消费者组","link":"#消费者组","children":[]},{"level":3,"title":"三种消息队列List PubSub Stream 解决方案的区别","slug":"三种消息队列list-pubsub-stream-解决方案的区别","link":"#三种消息队列list-pubsub-stream-解决方案的区别","children":[]}]},{"level":2,"title":"发布达人探店","slug":"发布达人探店","link":"#发布达人探店","children":[]},{"level":2,"title":"关注推送，Feed流，提供沉浸式体验","slug":"关注推送-feed流-提供沉浸式体验","link":"#关注推送-feed流-提供沉浸式体验","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.66,"words":2899},"filePathRelative":"doc/数据库/Redis.md","autoDesc":true}`);export{U as comp,$ as data};
